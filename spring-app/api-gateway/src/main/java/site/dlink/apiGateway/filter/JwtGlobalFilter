import lombok.extern.slf4j.Slf4j;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.cloud.gateway.filter.Ordered;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.core.Ordered;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.ReactiveSecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

@Slf4j
@Component
public class JwtGlobalFilter implements GlobalFilter, Ordered {

    private final JwtTokenProvider jwtTokenProvider;

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        log.info("JWT 필터링 (GlobalFilter) ...");

        // 헤더에서 토큰 추출
        ServerHttpRequest request = exchange.getRequest();
        String header = request.getHeaders().getFirst(JwtConstants.TOKEN_HEADER);

        // Bearer 체크
        if (header == null || !header.startsWith(JwtConstants.TOKEN_PREFIX)) {
            log.info("JWT 토큰이 없거나 형식이 맞지 않습니다.");
            return chain.filter(exchange);
        }

        // "Bearer " 제거
        String jwt = header.replace(JwtConstants.TOKEN_PREFIX, "");

        // 토큰 유효성 검사
        if (!jwtTokenProvider.validateToken(jwt)) {
            log.info("JWT 토큰이 유효하지 않습니다.");
            // 보통 여기서 에러 처리 or 그냥 다음 필터로 넘길 수 있음
            return chain.filter(exchange);
        }

        // 토큰에서 Authentication 추출
        Authentication authentication = jwtTokenProvider.getAuthentication(jwt);

        // ReactiveSecurityContextHolder 에 인증 정보를 넣어줌
        return chain.filter(exchange)
                    .contextWrite(ReactiveSecurityContextHolder.withAuthentication(authentication));
    }

    // 필터 순서
    @Override
    public int getOrder() {
        return 0;
    }
}
